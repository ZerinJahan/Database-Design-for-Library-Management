-- Creating the database
CREATE DATABASE PrescriptionsDB;
USE PrescriptionsDB;
GO

--Adding keys
ALTER TABLE Medical_Practice
ADD PRIMARY KEY (PRACTICE_CODE);
ALTER TABLE Prescriptions
ADD FOREIGN KEY (PRACTICE_CODE) REFERENCES Medical_Practice (PRACTICE_CODE);

ALTER TABLE Drugs
ADD PRIMARY KEY (BNF_CODE);
ALTER TABLE Prescriptions
ADD FOREIGN KEY (BNF_CODE) REFERENCES Drugs (BNF_CODE);

--Question 2 Query
 SELECT * FROM Drugs 
 WHERE BNF_DESCRIPTION like '%tablets%' or  BNF_DESCRIPTION like '%capsules%'

 --Question 3 Query
ALTER TABLE Prescriptions
ALTER COLUMN QUANTITY FLOAT NOT NULL;

ALTER TABLE Prescriptions
ALTER COLUMN ITEMS INT NOT NULL;

SELECT PRESCRIPTION_CODE, ROUND(QUANTITY, 0) * ITEMS AS total_quantity FROM Prescriptions;

--Question 4 Query
SELECT DISTINCT CHEMICAL_SUBSTANCE_BNF_DESCR
FROM Drugs;

--Question 5 Query
SELECT D.BNF_CHAPTER_PLUS_CODE, COUNT(P.PRESCRIPTION_CODE) as number_of_prescriptions, 
AVG(P.ACTUAL_COST) as Average_cost,  MIN(P.ACTUAL_COST) AS Minimum_cost, MAX(P.ACTUAL_COST) AS Maximum_cost
FROM Drugs D
INNER JOIN Prescriptions P ON D.BNF_CODE = P.BNF_CODE
GROUP BY D.BNF_CHAPTER_PLUS_CODE;

--Question 6 Query
SELECT M.PRACTICE_CODE, M.PRACTICE_NAME, P.ACTUAL_COST
FROM Medical_Practice M INNER JOIN Prescriptions P ON M.PRACTICE_CODE = P.PRACTICE_CODE
WHERE P.ACTUAL_COST > 4000
ORDER BY P.ACTUAL_COST DESC

--Question 7 Query
--1)IN Operator
SELECT *
FROM Medical_Practice
WHERE ADDRESS_4 IN ('BOLTON');

--2)JOIN Operator
SELECT D.CHEMICAL_SUBSTANCE_BNF_DESCR, COUNT(P.QUANTITY) as Total_Amount 
FROM Drugs D INNER JOIN Prescriptions P ON D.BNF_CODE = P.BNF_CODE
GROUP BY D.CHEMICAL_SUBSTANCE_BNF_DESCR;


--3)NESTED queary with IN Operator
SELECT BNF_CODE, ITEMS FROM Prescriptions
WHERE BNF_CODE  IN(
    SELECT  DISTINCT BNF_CODE FROM Drugs
	WHERE CHEMICAL_SUBSTANCE_BNF_DESCR = 'Eye Products');

--4)System function: CONCAT Operator
SELECT PRACTICE_NAME, CONCAT(ADDRESS_1, ' ', ADDRESS_2, ' ', ADDRESS_3, ' ', ADDRESS_4) AS FullAddress
FROM Medical_Practice;

--5)GROUP BY< HAVING, ORDER BY Operator
SELECT PRESCRIPTION_CODE, AVG(ACTUAL_COST) as Average_cost
FROM Prescriptions
GROUP BY PRESCRIPTION_CODE
HAVING AVG(ACTUAL_COST) BETWEEN 2000 and 5000
ORDER BY Average_cost ASC